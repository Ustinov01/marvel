{"version":3,"file":"static/js/877.e25a0dca.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearcForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","components/hooks/http.hook.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",  objectFit: 'contain', margin: \"0 auto\"}} src={img} alt='Error'/>\r\n    )\r\n\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n    \n\n\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n  \n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n\n\n\n\n\n\n","import {useState, useEffect, useRef} from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    \n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n\n    }\n\n   \n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n \n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}   \n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n \n\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        \n\n        if(!charId) {\n            return;\n        }\n        \n        clearError();\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n    \n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n    \n}\n\n\nconst View = ({char}) => {\n    \n    const {name, description, thumbnail, wiki, homepage, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    \n    return (\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There is no comics with this caracter'}\n            {\n                comics.map((item, i) => {\n                    // eslint-disable-next-line\n                    if (i > 10) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    \n                })\n            }\n            \n        </ul>\n    \n    </>\n    )\n}\n\nexport default CharInfo;\n","import { useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport './charSearchForm.scss';\r\n\r\n\r\n\r\n\r\n\r\nconst CharSearchForm = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, error, loading}  = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n\r\n\r\n    const errorMessage = error ? <div className='char__search-critical-error'> <ErrorMessage/> </div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                    <div className='char__search-wrapper'>\r\n                        <div className='char__search-success'>There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div>\r\n                    :\r\n                    <div className='char__search-error'>The character was not found. Check the name and try again</div>\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearcForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information Portal\"\r\n                />\r\n                <title>Marvel information</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n            <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../components/hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=7681499ea8456a7a3493ca32b857a099';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    // getResource = async (url) => {\r\n    //     let res = await fetch(url);\r\n\r\n    //     if(!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n\r\n\r\n    //     return await res.json();\r\n    // }\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n\r\n    const getNineCharacters = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 15) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return  res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? (char.description.length > 150 ? char.description.slice(0, 150) + '...' : char.description) : 'description unfortunately missing',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, getNineCharacters, getAllComics, getComic, getCharacterByName, clearError}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n\r\n        }\r\n\r\n\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, error, request, clearError};\r\n\r\n\r\n}\r\n"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","_Fragment","comics","charId","skeleton","Skeleton","getCharacterByName","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","this","setState","console","log","Component","selectedChar","Helmet","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","setLoading","setError","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","getNineCharacters","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","_ref6","_callee6","_context6","_x4","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}